

# archeoviz

* revoir la structure de l'arborescence sur le serveur huma-num, en utilisant le parametre path de load_all() pour n'avoir qu'une copie du package
* bouton Lancer / Rafraîchir
* Problème : lorsque changement de variable, les plots de section se mettent à jour (le plot 3D et le plan ne se mettent pas à jour, comme attendu)
* ajouter dans la doc le fonctionnement des numerotations de carrés : ils doivent :
	* suivre un ordre alpha numérique
	* si le nbre de label de carré ne correspond exactement au nombre total de carrés pouvant être défini à partir des coordonnées, les labels de carrés ne sont pas affichés (pour éviter un affiachage erroné)
	  Toutefois, les paramètres add.x.square.labels et add.y.square.labels permettent d'ajouter les labels manquants (qui seront positionnés par ordre alphanumérique)
* add test for reverse.axis.values et  reverse.square.names
* passer la definition des squares dans une fonction .do_square_list() et ajouter des tests
* améliorer les labels pour les adapter lors de la représentation de grandes surfaces
* add an error or default layer value if empty layer
* revoir timeline, qui bloque à cause d'un if(from.ui.timleine) dans do_process_timeline()  
* rendre les minimaps téléchargeables
* rendre possible le rearrangement des labels de carré : square_x, square_x_order, square_y, square_y_order


* perspective interfaçage / openarcheo ou nkala: faire qu'il soit possible de lancer avec un url une instance archeoviz mettant en evidence un objet.
	(idéee : un convertiesseur tranforme l'url et ses parametrs en commande archeoviz()  adaptée avec les paramètres)

DONE:
* voir  package explor : pour export des parametres courant d'une appli shiny
*  récupérer l'état des paramètres
		https://stackoverflow.com/questions/32460475/export-all-user-inputs-in-a-shiny-app-to-file-and-load-them-later
	
	
# portal

* ajouter une rubrique “variables” (type et description), voir l'exemple de tDAR, récupérant les données dans le tableau metadata.csv
	soit 1 colonne par variable (contenant alors les 3 champs : name, type, description)
	soit 3 colonnes par variable (Column Name,	Data Type, description)
* indexation periodo + geonames pour els communes
* marquer le site sélectionné par une forme différente

* envisager la gestion d'intervalles de dates : 
	jouter une colonne contenant toutes les périodes couvertes et utiliser
	datatable(	options = list( columnDefs = list(list(visible=FALSE, targets=c(4))))  )
	pour masquer cette colonne tout en permettant qu'elle soit filtrable





## Méthode pour remontages

Deux cas de figure :

1. les remontages physiques sont documentés (par paire de fragments)
2. les remontages sont documentés par ensembles de fragments joins (sans préciser quel fragment remonte avec quel fragment)

Deux variables sont à documenter dans le tableau metadata.csv
* n.refits : nombre de relations de remontage physiques (paires de fragments)
* n.remains.in.refitting.set : nombre de fragments étant inclus dans des ensembles de remontages

Parti pris : les fragments inclus dans des ensembles de remontage ne comprenant que 2 fragments sont considérés comme des "refits" (puisqu'il n'y a pas d'ambiguité à propos de la composition des paires de fragmentes remontables)


